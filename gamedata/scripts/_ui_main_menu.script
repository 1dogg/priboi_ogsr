--[[-----------------------------------------------------------------------------------------------
 File         : ui_main_menu.script
 Description  : Главное меню
 Copyright    : 2004 GSC Game World
 Authors      : Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
 Version      : 0.9
 Date         : 28.10.2004
 Last edit    : 18.01.2006
 Modified	  : KRodin (c) 2018
--]]-----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
-- ИСПОЛЬЗОВАТЬ ПРИ ПРОБЛЕМАХ В ГЛАВНОМ МЕНЮ И ВХОДА В НАСТРОЙКИ, ТАКЖЕ ПРИ ВОЗНИКНОВЕНИИ ОШИБКИ "CONNECT (NIL VALUE)", "UPDATECONTROLS"
-- функции ниже должны присутствовать в _g.script
----------------------------------------------------------------------------------------------------------------------------------------
function cmd(scmd, ...)
	ASSERT(scmd, "[cmd] scmd is a nil reference")
	local args = {...}
	if #args > 0 then
		scmd = scmd..' '..table.concat(args, ' ')
	end
	get_console():execute(scmd)
end

function ABORT(s,...)
	printf("rx_utils.abort: "..s,...)
	config:r_bool("___aborting","a")
end
_G['ABORTX'] = ABORT

function ASSERT(o,s,...)
	if not o then
		ABORT(s,...)
	end
end

local to_ptrn = {
	[' '] = '%s',
	['.'] = '%.',
	['%'] = '%%',
	['*'] = '%*',
	['-'] = '%-'
}
string.explode = function( div,    -- разделитель
                           str,    -- строка
                           clear ) -- обрезать ли пробелы по краям строк (false/true)
	local ret = {}
	for s in str:gmatch("([^"..(to_ptrn[div] or div).."]+)") do
		ret[#ret+1] = (clear and s:trim() or s)
	end
	return ret
end

-- очистка строки от "лишних" символов (полезно при работе с FS)
string.clear = function(str) --KRodin: поправил функцию, теперь работает.
	return str:gsub( '[/:<>|%*%?"\\]*', "" )
end
-- cрезать пробелы слева и справа
string.trim   = function(s) return s:match( "^%s*(.*%S)" ) or "" end
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

class "main_menu" (CUIScriptWnd)
function main_menu:__init() super()
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
end

function main_menu:__finalize()
	--log1("--main_menu:__finalize() called!")
end

function main_menu:InitControls()
	self:Init(0, 0, 1024, 768)
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_main.xml")

	xml:InitStatic("back_movie", self)
	xml:InitStatic("background", self)
	xml:InitStatic("fire_movie", self)
	self.shniaga = xml:InitMMShniaga("shniaga_wnd", self)

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")

	local ver = xml:InitStatic("static_version", self)
	ver:SetText("" .. _G.main_menu.get_main_menu():GetGSVer()) -- изменено MonolithUI
	-- ver:SetTextColor(255, 255, 0, 0) -- изменено MonolithUI
end

function main_menu:Show(...)
	self.shniaga:SetVisibleMagnifier(...)
end

function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice", ui_events.BUTTON_CLICKED, self.OnButton_new_novice_game, self)
	self:AddCallback("btn_stalker", ui_events.BUTTON_CLICKED, self.OnButton_new_stalker_game, self)
	self:AddCallback("btn_veteran", ui_events.BUTTON_CLICKED, self.OnButton_new_veteran_game, self)
	self:AddCallback("btn_master", ui_events.BUTTON_CLICKED, self.OnButton_new_master_game, self)
	-- options
	self:AddCallback("btn_options", ui_events.BUTTON_CLICKED, self.OnButton_options_clicked, self)
	-- load
	self:AddCallback("btn_load", ui_events.BUTTON_CLICKED, self.OnButton_load_clicked, self)
	-- save
	self:AddCallback("btn_save", ui_events.BUTTON_CLICKED, self.OnButton_save_clicked, self)
	-- quit
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.OnButton_quit_clicked, self)
	self:AddCallback("btn_quit_to_mm", ui_events.BUTTON_CLICKED, self.OnButton_disconnect_clicked, self)
	self:AddCallback("btn_lastsave", ui_events.BUTTON_CLICKED, self.OnButton_last_save, self)
	self:AddCallback("btn_credits", ui_events.BUTTON_CLICKED, self.OnButton_credits_clicked, self)
	-- message box
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMsgOk, self)
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_CANCEL_CLICKED, self.OnMsgCancel, self)
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.OnMsgYes, self)
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.OnMsgNo, self)
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame, self)
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin, self)
	self:AddCallback("btn_ret", ui_events.BUTTON_CLICKED, self.close_and_delete_menu, self)
end

function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	cmd("load_last_save")
	self:close_and_delete_menu()
end
-- Старый вариант загрузки игры
--[[function main_menu:OnButton_last_save()
	local f = getFS()
	local flist = f:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.sav")
	local f_cnt = flist:Size()
	
	if f_cnt == 0 then
		return
	end
	
	flist:Sort(FS.FS_sort_by_modif_down)
	
	local file		=	flist:GetAt(0)
	local command = "load " .. string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - 4))
	
	local console = get_console()
	console:execute("main_menu off")
	console:execute(command)
end]]--

function main_menu:OnMsgYes()
	if self.mbox_mode == 1 then
		self:LoadLastSave()
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:OnMessageQuitGame()
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnButton_new_novice_game()
	self:StartGame("gd_novice")
end

function main_menu:OnButton_new_stalker_game()
	self:StartGame("gd_stalker")
end

function main_menu:OnButton_new_veteran_game()
	self:StartGame("gd_veteran")
end

function main_menu:OnButton_new_master_game()
	self:StartGame("gd_master")
end

function main_menu:OnButton_last_save()
	if not level.present() or not ( db.actor_proxy.online and db.actor:alive() ) then
		self:LoadLastSave()
		return
	end

	self.mbox_mode = 1
	self.message_box:Init("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:StartGame( difficulty )
	cmd("g_game_difficulty "..difficulty)
	if alife() then
		cmd("disconnect")
	end
	cmd("start server(all/single/alife/new)")
	self:close_and_delete_menu()
end

function main_menu:OnButton_save_clicked()
	if not self.save_dlg then
		self.save_dlg = ui_mm_save_load_dialog.save_load_dialog( true )
		self.save_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.save_dlg)
	--
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
	if not self.load_dlg then
		self.load_dlg = ui_mm_save_load_dialog.save_load_dialog()
		self.load_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.load_dlg)
	--
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if not self.opt_dlg then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:Show(false)
end

function main_menu:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik_to_bind(dik) == key_bindings.kQUIT then
			if level.present() and db.actor_proxy.online and db.actor:alive() then
				self:close_and_delete_menu()
			end
		elseif dik == DIK_keys.DIK_N then --personal_test
			xpcall(function() dofile(getFS():update_path("$game_scripts$", "personal_test.lua")) end, log1)
		end
	end

	return true
end

--Для закрытия меню использовать только этот специальный метод!
function main_menu:close_and_delete_menu()
	-- Удаляем в движке каллбеки, в которых хранятся ссылки на объекты оконных классов (которые добавляются в AddCallback(..., self),
	-- иначе части меню не удалятся и будут висеть в памяти до перезапуска LUA (до загрузки сейва, например)
	-- Так же, надо обнулить висячие ссылки (self.*_dlg), иначе сборщик мусора эти объекты не удалит. Да, это странно, но это так.
	if self.save_dlg then self.save_dlg:ClearCallbacks() self.save_dlg = nil end
	if self.load_dlg then self.load_dlg:ClearCallbacks() self.load_dlg = nil end
	if self.opt_dlg then
		if self.opt_dlg.dlg_video_adv then self.opt_dlg.dlg_video_adv = nil end
		self.opt_dlg:ClearCallbacks() self.opt_dlg = nil
	end
	self:ClearCallbacks() --main_menu удаляется движком, но для надёжности и ему каллбеки удалим.
	--
	cmd("main_menu off")
end
