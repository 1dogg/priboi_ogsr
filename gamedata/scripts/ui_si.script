--Edition By SpawnerToolKit (Author SDK: SuhininKirill | VK: UPFS)
spawn_type = nil
local mob_table = {
	"bloodsucker_weak"
}
local item_table = {
	"absolut_vodka",
	"absolut_vodka_hud",
	"nemiroff_vodka",
	"nemiroff_vodka_hud",
	"smirnoff_vodka",
	"smirnoff_vodka_hud",
	"mineral_water",
	"mineral_water_hud",
	"korn_conserva",
	"olives_conserva",
	"sardinia_conserva",
	"yantar_food",
	"peanut_conserva",
	"tushkano_conserva",
	"antidote",
	"bread_a",
	"bread",
	"kolbasa",
	"kolbasa_a",
	"conserva",
	"vodka_a",
	"vodka",
	"guitar_a",
	"harmonica_a",
	"priboi_pda",
	"priboi_torch",
	"matras",
	"antirad",
	"medkit",
	"medkit_army",
	"medkit_scientic",
	"bandage",
	"binocular_a",
	"device_pda",
	"device_torch",
	"detector_simple",
	"detector_advances",
	"detector_elite",
	"wpn_vodka_hud",
	"wpn_holster_hud",
	"wpn_sigarette_hud",
	"tualet_bumaga",
	"mutant_flesh_eye",
	"mutant_boar_leg",
	"mutant_dog_tail",
	"mutant_psevdodog_tail",
	"mutant_krovosos_jaw",
	"mutant_burer_hand",
	"mutant_zombie_hand",
	"mutant_snork_leg",
	"mutant_rat_corpse",
	"mutant_izlom_arm",
	"mutant_cat_head",
	"mutant_controller_foot",
	"mutant_poltergeist_brain",
	"bar_ecolog_flash",
	"crazy_flash",
	"cit_doctors_key",
	"mil_svoboda_leader_pda",
	"hand_radio_mil",
	"mil_convoy_report",
	"mil_scientist_flash",
	"gar_stalker_uhsf_info",
	"bar_tiran_pda",
	"bar_lucky_pda",
	"dynamite",
	"esc_wounded_flash",
	"val_key_to_underground",
	"good_psy_helmet",
	"bad_psy_helmet",
	"dar_pass_flash",
	"dar_document1",
	"dar_document2",
	"dar_document3",
	"dar_document5"
}
local ammo_table = {
	"ammo_gauss"
}
local wpn_table = {
	"wpn_knife_base",
	"fake_wpn_knife_base",
	"monnoroch",
	"wpn_ppsh",
	"wpn_ppsh41_sk2",
	"wpn_fake_missile",
	"wpn_fake_missile1",
	"wpn_fake_missile2",
	"explosive_fuelcan",
	"explosive_tank",
	"explosive_barrel_low",
	"explosive_barrel",
	"explosive_mobiltank",
	"wpn_addon_scope",
	"wpn_addon_scope_susat",
	"wpn_addon_scope_susat_g3",
	"wpn_addon_scope_susat_mp5sd",
	"wpn_addon_silencer",
	"wpn_addon_grenade_launcher",
	"wpn_addon_grenade_launcher_m203",
	"wpn_type_teg",
	"wpn_type_hbgteg",
	"ammo_7.62x25_p",
	"ammo_7.62x25_ps",
	"ammo_7.62x51_fmj",
	"ammo_7.62x51_ap",
	"weapon_base",
	"wpn_abakan",
	"wpn_ak103",
	"wpn_ak74",
	"wpn_ak74u",
	"wpn_benelli_short",
	"wpn_beretta",
	"wpn_binoc",
	"wpn_bizon",
	"wpn_bm16",
	"wpn_bm16_full",
	"bolt",
	"wpn_colt1911",
	"wpn_desert_eagle",
	"grenade_f1",
	"wpn_fn2000",
	"wpn_fort",
	"wpn_g36",
	"wpn_g3",
	"wpn_gauss",
	"wpn_groza",
	"wpn_hpsa",
	"wpn_knife",
	"wpn_kriss_super_v",
	"wpn_l85",
	"wpn_lr300",
	"wpn_m1891_30",
	"wpn_m1891_30_scope",
	"wpn_mac10",
	"wpn_mp5",
	"wpn_mp7a3",
	"wpn_ots33",
	"wpn_p90",
	"wpn_pb",
	"wpn_pkm",
	"wpn_pm",
	"wpn_rg-6",
	"grenade_rgd5",
	"wpn_rpg7",
	"wpn_rpg7_missile",
	"wpn_saiga12c",
	"wpn_sig220",
	"wpn_sig550",
	"wpn_smg_tmp",
	"wpn_spas12",
	"wpn_svd",
	"wpn_svu",
	"wpn_tec9",
	"wpn_toz34",
	"wpn_usp",
	"wpn_val",
	"wpn_vintorez",
	"wpn_walther",
	"wpn_wincheaster1300"
}
local art_table = {
	"af_base"
}
local outf_table = {
	"bandit_outfit"
}

class "spawn_item" (CUIListItemEx)

--Editing by Kirill Suxinin

function spawn_item:__init() super()
	self.text					= CUIStatic()
	self:AttachChild			(self.text)
	self.text:SetFont			(GetFontLetterica18Russian())
	self.text:SetTextColor		(255,216,186,140)
end

class "spawn_item_dialog" (CUIScriptWnd)

--Editing by Kirill Suxinin

function spawn_item_dialog:__init() super()

   self:InitControls()
   self:InitCallBacks()
end

function spawn_item_dialog:__finalize()
end

function spawn_item_dialog:InitControls()
	self:Enable(true)
	self:SetWndRect(Frect():set(0,0,1024,768))
	local xml = CScriptXmlInit()
	xml:ParseFile	("ui_si_dlg.xml")
	xml:InitStatic	("background", self)	-- рамка
	self.list = xml:InitList("list",self)	-- список
	self.list:ShowSelectedItem(true)
	self:Register(self.list, "list_window")
	self:Register(xml:Init3tButton("btn_ammo", self),"btn_ammo")	-- верхние кнопки
	self:Register(xml:Init3tButton("btn_wpn", self),"btn_wpn")
	self:Register(xml:Init3tButton("btn_art", self),"btn_art")
	self:Register(xml:Init3tButton("btn_item", self),"btn_item")
	self:Register(xml:Init3tButton("btn_outf", self),"btn_outf")
	self:Register(xml:Init3tButton("btn_create", self),"btn_create")	-- нижние кнопки
	self:Register(xml:Init3tButton("btn_close", self),"btn_close")

      self:Register(xml:Init3tButton("btn_stalker", self),"btn_stalker")    -- новые кнопки 
      self:Register(xml:Init3tButton("btn_anom", self),"btn_anom")     
      self:Register(xml:Init3tButton("btn_mob", self),"btn_mob")     

end

function spawn_item_dialog:TEST()
	local console = get_console()
	self.list.RemoveAll()
	
	
	for i,v in ipairs(stalker_table) do
		self:AddItemToList(v[0])
    end
end

function spawn_item_dialog:InitCallBacks()
	self:AddCallback("btn_ammo",	ui_events.BUTTON_CLICKED,	self.FillList_ammo, self)
	self:AddCallback("btn_wpn",		ui_events.BUTTON_CLICKED,	self.FillList_wpn, self)
	self:AddCallback("btn_art",		ui_events.BUTTON_CLICKED,	self.FillList_art, self)
	self:AddCallback("btn_item",	ui_events.BUTTON_CLICKED,	self.FillList_item, self)
	self:AddCallback("btn_outf",	ui_events.BUTTON_CLICKED,	self.FillList_outf, self)
	self:AddCallback("btn_create",	ui_events.BUTTON_CLICKED,	self.OnButton_create_clicked, self)
	self:AddCallback("btn_close",	ui_events.BUTTON_CLICKED,	self.OnButton_close_clicked, self)
	self:AddCallback("list_window",	ui_events.WINDOW_LBUTTON_DB_CLICK,	  self.OnButton_create_clicked,	self)
	self:AddCallback("btn_stalker",	ui_events.BUTTON_CLICKED,	self.FillList_stalker, self)
	self:AddCallback("btn_mob",	ui_events.BUTTON_CLICKED,	self.FillList_mob, self)
	self:AddCallback("btn_anom",	ui_events.BUTTON_CLICKED,	self.FillList_anom, self)

end


function spawn_item_dialog:FillList_stalker()
	self.list:RemoveAll()
      spawn_type="stalker"
	--for i = 1, #stalker_table do
	--	self:AddItemToList(stalker_table[i])
	--end
	
	local tbl
	tbl = stalker_table
	for i, v in ipairs(tbl) do
		self:AddItemToList(v)
	end
	
	
	
end


function spawn_item_dialog:FillList_mob()
	self.list:RemoveAll()
      spawn_type="stalker"
	  
	--for i = 1, #mob_table do
	--	self:AddItemToList(mob_table[i])
	--end
	
	local tbl
	tbl = mob_table
	for i, v in ipairs(tbl) do
		
		self:AddItemToList(v)
	end
	
end


function spawn_item_dialog:FillList_anom()
	self.list:RemoveAll()
      spawn_type="anom"
	for i = 1, #anom_table do
		self:AddItemToList(anom_table[i])
	end
end

function spawn_item_dialog:FillList_ammo()
	self.list:RemoveAll()
        spawn_type="actor"
		
	for i = 1, #ammo_table do
		self:AddItemToList(ammo_table[i])
	end
	
	--local tbl
	--local name
	--tbl = ammo_table 
	--for i, v in ipairs(tbl) do
	--	name = game.translate_string(system_ini():r_string(v, "inv_name"))
	--	
	--	self:AddItemToList(name)
	--end
	
end


function spawn_item_dialog:FillList_wpn()
	self.list:RemoveAll()
        spawn_type="actor"
	for i = 1, #wpn_table do
		self:AddItemToList(wpn_table[i])
	end
	
	--local tbl
	--local name
	--tbl = wpn_table 
	--for i, v in ipairs(tbl) do
	--	name = game.translate_string(system_ini():r_string(v, "inv_name"))
	--	
	--	local a = string.format("%s     [%s]", name,v)
	--	
	--	self:AddItemToList(a)
	--end
	
	
end

function spawn_item_dialog:FillList_art()
	self.list:RemoveAll()
        spawn_type="actor"
		
	--for i = 1, #art_table do
	--	self:AddItemToList(art_table[i])
	--end
	local tbl
	tbl = art_table
	
	for i, v in ipairs(tbl) do

	
		self:AddItemToList(v)
	end
	
	
end
function spawn_item_dialog:FillList_item()
	self.list:RemoveAll()
        spawn_type="actor"
	--for i = 1, #item_table do
	--	self:AddItemToList(item_table[i])
	--end
	
	local tbl
	tbl = item_table
	for i, v in ipairs(tbl) do
		
		self:AddItemToList(v)
	end
	
	
end
function spawn_item_dialog:FillList_outf()
	self.list:RemoveAll()
        spawn_type="actor"
		
	for i = 1, #outf_table do
		self:AddItemToList(outf_table[i])
	end
	
	--local tbl
	--local name
	--tbl = outf_table
	--for i, v in ipairs(tbl) do
	--	name = game.translate_string(system_ini():r_string(v, "inv_name"))
	--	
	--	local a = string.format("%s     [%s]", name,v)
	--	
	--	self:AddItemToList(a)
	--end
	
end

function spawn_item_dialog:AddItemToList(item_name)
	local _itm				= spawn_item()
	_itm.text:SetText		(item_name)
	self.list:AddItem		(_itm)
end

function spawn_item_dialog:OnButton_create_clicked()	
	if self.list:GetSize()==0 then 
		return 
	end
	local index = self.list:GetSelectedItem()
	if index == -1 then 
		return 
	end
	local item = self.list:GetItem(index).text:GetText()
	if alife() and db.actor:alive() then

		local pos = db.actor:position()
		local dir = db.actor:direction()

           if spawn_type=="actor" then
		pos = pos:add(dir:mul(3))
		alife():create(item, pos, 0, 0, db.actor:id())
           end
      if spawn_type=="stalker" then
		pos = pos:add(dir:mul(3))
 		alife():create(item, pos, db.actor:level_vertex_id(), db.actor:game_vertex_id())
      end
      if spawn_type=="anom" then
		pos = pos:add(dir:mul(3))
 		spawn_anom(item,pos)
      end
	end
end

function spawn_item_dialog:OnButton_close_clicked()
	self:GetHolder():start_stop_menu	(self,false)
	self.owner:Show						(true)
	if level.present() and db.actor and db.actor:alive() then
		get_console():execute("main_menu off")
	end
end

function spawn_item_dialog:OnKeyboard(dik, keyboard_action)
	local bind = dik_to_bind(dik)
	if bind == key_bindings.kQUIT then
		self:OnButton_close_clicked()
	else
		if dik==28 then
			self:OnButton_create_clicked()
		end
	end
	return true
end

function main()
end

function spawn_anom(item,pos)


local obj = alife():create(item,pos,db.actor:level_vertex_id(),db.actor:game_vertex_id())
    if string.find(obj:section_name(), "zone_mine_gravitational") or
       string.find(obj:section_name(), "field") or 
       string.find(obj:section_name(), "teleport") or
       string.find(obj:section_name(), "death") or  
       string.find(obj:section_name(), "sarcofag") or  
       string.find(obj:section_name(), "zone_radioactive") then
     anom.create_anom(obj,3, pos, db.actor:level_vertex_id(), db.actor:game_vertex_id(),"field")
       else
     anom.create_anom(obj,3, pos, db.actor:level_vertex_id(), db.actor:game_vertex_id())
end
end


--Edition By SpawnerToolKit (Author SDK: SuhininKirill | VK: UPFS)


--Edition By SpawnerToolKit (Author SDK: SuhininKirill | VK: UPFS)


--Edition By SpawnerToolKit (Author SDK: SuhininKirill | VK: UPFS)


--Edition By SpawnerToolKit (Author SDK: SuhininKirill | VK: UPFS)


--Edition By SpawnerToolKit (Author SDK: SuhininKirill | VK: UPFS)
